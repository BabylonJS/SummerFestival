//update ground detection
private updateGroundDetection(): void {
        
    //raycasting for gravity & ground collision
    let onObject = false;

    //jump check
    var delta = this._scene.getEngine().getDeltaTime()/1000.0;
    var pick1;
    var pick2;
    var pick3;
    var pick4;


    this.velocityfalling.y = this.velocityfalling.y + (Player.GRAVITY*delta*Player.GRAVITY_SCALE);
    
    if(this.velocityfalling.y < -Player.JUMP_FORCE){
        this.velocityfalling.y = -Player.JUMP_FORCE;
    }
    if(this.velocityfalling.y < 0){

        //anim controllers
        this._isFalling = true;
        if(this._anims != null){
            this._currentAnim = this._land;
        }
        this._jumped = false;

        //use the outer mesh(invisible)
        var corners = [
            new Vector3(this._mesh.position.x-1, this._mesh.position.y+1.5, this._mesh.position.z+1),
            new Vector3(this._mesh.position.x+1, this._mesh.position.y+1.5, this._mesh.position.z+1),
            new Vector3(this._mesh.position.x-1, this._mesh.position.y+1.5, this._mesh.position.z-1),
            new Vector3(this._mesh.position.x+1, this._mesh.position.y+1.5, this._mesh.position.z-1)
        ];
        var ray = new Ray(corners[0],new Vector3(0,1,0).scale(-1), 2);
        var ray2 =new Ray(corners[1],new Vector3(0,1,0).scale(-1), 2);
        var ray3 =new Ray(corners[2],new Vector3(0,1,0).scale(-1), 2);
        var ray4 =new Ray(corners[3],new Vector3(0,1,0).scale(-1), 2); 
    
        pick1 = this._scene.pickWithRay(ray);
        pick2 = this._scene.pickWithRay(ray2);
        pick3 = this._scene.pickWithRay(ray3);
        pick4 = this._scene.pickWithRay(ray4);
        
        
        if(pick1.hit || pick2.hit || pick3.hit || pick4.hit ){
            onObject = true;
            //difference keeps track of how far the pickpoint of the ray was from the bottom player's y position
            var diff = 0;
            if(pick1.hit){
                // console.log(pick1.pickedMesh.name);
                diff = pick1.pickedPoint.y - this._mesh.position.y;
            }
            if(pick2.hit) {
                diff = pick2.pickedPoint.y - this._mesh.position.y;
            }
            if(pick3.hit) {
                diff = pick3.pickedPoint.y - this._mesh.position.y;
            }
            if(pick4.hit){
                diff = pick4.pickedPoint.y - this._mesh.position.y;
            }
            
            //in progress: hit dist is less than where expected to fall next
            if(diff > this.velocityfalling.y + (Player.GRAVITY*delta*Player.GRAVITY_SCALE*(3.5-1))) {
                this.velocityfalling.y = 0;
                this._mesh.position.addInPlace(new Vector3(0,diff,0)); //add the difference so that player is on the ground now

            }

            // if the pickpoint fell into the player, readjust
            // if(diff>-1.99) {
            //     //should no longer be falling
            //     this.velocityfalling.y = 0;
            //     this._mesh.position.addInPlace(new Vector3(0,1.99+diff,0)); //add the difference so that player is on the ground now
            // }
        }
    }
    if (onObject) {
        this.velocityfalling.y = Math.max(0, this.velocityfalling.y);
        this._isFalling = false;
        this._groundY = this._mesh.position.y;
        this._lastGroundPos.copyFrom(this._mesh.position);
    }
    
    if (this._input.jumpKeyDown && onObject) {
        this._jumped = true;
        this.velocityfalling.y = Player.JUMP_FORCE;
        onObject = false;
    }
}

private beforeRenderUpdate(): void {
    this.updateFromControls();
    //movement based on camera
    this._velocity = new Vector3(this._h, 0, this._v).scale(this._deltaTime * Player.PLAYER_SPEED);

    this.updateGroundDetection();

    this.animatePlayer();

    //limit dash to once per ground/platform touch
    if(this._input.dashing){
        if(this.dashTime <= 0){
            this._input.dashDxn = 0;
            this.dashTime = Player.DASH_START_TIME;
            this._input.dashing = false;
            this.dashvelv.y = 0;
            this.dashvelh.x = 0;
        } else {
            this.dashTime -= this._scene.getEngine().getDeltaTime()/3000;

            if(this._input.dashDxn == 1){ // fwd
                this.dashvelv.z = .5;

                this._velocity.z +=.8;
            } else if(this._input.dashDxn == 2) {
                this.dashvelv.z = -.5;

                this._velocity.z -=.8;
            } else if(this._input.dashDxn == 3){ // left
                this.dashvelh.x= -.5;
             
                this._velocity.x -=.8;
            } else if(this._input.dashDxn == 4){ //right
                this.dashvelh.x= .5;
      
                this._velocity.x +=.8;


            }
        }
    }

    //MOVEMENTS BASED ON CAMERA (as it rotates) 
    var fwd = this._camRoot.forward;
    var right = this._camRoot.right;
    fwd.y =0;
    right.y=0;
    fwd.normalize();
    right.normalize();
    //movement to check for collisions in x/z
    var temp = this._velocity;
    temp.y = 0
    fwd.scaleInPlace(temp.z).addInPlace(right.scaleInPlace(temp.x));
    this._mesh.moveWithCollisions(fwd);

    //movement to have gravity act
    this._mesh.position.addInPlace(new Vector3(0,this.velocityfalling.y,0));
}